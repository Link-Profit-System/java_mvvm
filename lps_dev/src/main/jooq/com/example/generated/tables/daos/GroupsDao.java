/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables.daos;


import com.example.generated.tables.JGroups;
import com.example.generated.tables.pojos.GroupsVo;
import com.example.generated.tables.records.GroupsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupsDao extends DAOImpl<GroupsRecord, GroupsVo, Integer> {

    /**
     * Create a new GroupsDao without any configuration
     */
    public GroupsDao() {
        super(JGroups.GROUPS, GroupsVo.class);
    }

    /**
     * Create a new GroupsDao with an attached configuration
     */
    public GroupsDao(Configuration configuration) {
        super(JGroups.GROUPS, GroupsVo.class, configuration);
    }

    @Override
    public Integer getId(GroupsVo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GroupsVo> fetchRangeOfJId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JGroups.GROUPS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<GroupsVo> fetchByJId(Integer... values) {
        return fetch(JGroups.GROUPS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public GroupsVo fetchOneByJId(Integer value) {
        return fetchOne(JGroups.GROUPS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<GroupsVo> fetchOptionalByJId(Integer value) {
        return fetchOptional(JGroups.GROUPS.ID, value);
    }

    /**
     * Fetch records that have <code>group_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GroupsVo> fetchRangeOfJGroupName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JGroups.GROUPS.GROUP_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_name IN (values)</code>
     */
    public List<GroupsVo> fetchByJGroupName(String... values) {
        return fetch(JGroups.GROUPS.GROUP_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>group_name = value</code>
     */
    public GroupsVo fetchOneByJGroupName(String value) {
        return fetchOne(JGroups.GROUPS.GROUP_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>group_name = value</code>
     */
    public Optional<GroupsVo> fetchOptionalByJGroupName(String value) {
        return fetchOptional(JGroups.GROUPS.GROUP_NAME, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GroupsVo> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JGroups.GROUPS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<GroupsVo> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JGroups.GROUPS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GroupsVo> fetchRangeOfJCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JGroups.GROUPS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<GroupsVo> fetchByJCreatedBy(Integer... values) {
        return fetch(JGroups.GROUPS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GroupsVo> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JGroups.GROUPS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<GroupsVo> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JGroups.GROUPS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GroupsVo> fetchRangeOfJUpdatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JGroups.GROUPS.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<GroupsVo> fetchByJUpdatedBy(Integer... values) {
        return fetch(JGroups.GROUPS.UPDATED_BY, values);
    }
}
