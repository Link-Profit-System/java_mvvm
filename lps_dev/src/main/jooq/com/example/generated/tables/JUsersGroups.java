/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.JPublic;
import com.example.generated.Keys;
import com.example.generated.tables.JGroups.GroupsPath;
import com.example.generated.tables.JUsers.UsersPath;
import com.example.generated.tables.records.UsersGroupsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUsersGroups extends TableImpl<UsersGroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_groups</code>
     */
    public static final JUsersGroups USERS_GROUPS = new JUsersGroups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersGroupsRecord> getRecordType() {
        return UsersGroupsRecord.class;
    }

    /**
     * The column <code>public.users_groups.id</code>.
     */
    public final TableField<UsersGroupsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users_groups.user_id</code>.
     */
    public final TableField<UsersGroupsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users_groups.group_id</code>.
     */
    public final TableField<UsersGroupsRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users_groups.created_at</code>.
     */
    public final TableField<UsersGroupsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.users_groups.created_by</code>.
     */
    public final TableField<UsersGroupsRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.users_groups.updated_at</code>.
     */
    public final TableField<UsersGroupsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.users_groups.updated_by</code>.
     */
    public final TableField<UsersGroupsRecord, Integer> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.INTEGER, this, "");

    private JUsersGroups(Name alias, Table<UsersGroupsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JUsersGroups(Name alias, Table<UsersGroupsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users_groups</code> table reference
     */
    public JUsersGroups(String alias) {
        this(DSL.name(alias), USERS_GROUPS);
    }

    /**
     * Create an aliased <code>public.users_groups</code> table reference
     */
    public JUsersGroups(Name alias) {
        this(alias, USERS_GROUPS);
    }

    /**
     * Create a <code>public.users_groups</code> table reference
     */
    public JUsersGroups() {
        this(DSL.name("users_groups"), null);
    }

    public <O extends Record> JUsersGroups(Table<O> path, ForeignKey<O, UsersGroupsRecord> childPath, InverseForeignKey<O, UsersGroupsRecord> parentPath) {
        super(path, childPath, parentPath, USERS_GROUPS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersGroupsPath extends JUsersGroups implements Path<UsersGroupsRecord> {
        public <O extends Record> UsersGroupsPath(Table<O> path, ForeignKey<O, UsersGroupsRecord> childPath, InverseForeignKey<O, UsersGroupsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersGroupsPath(Name alias, Table<UsersGroupsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersGroupsPath as(String alias) {
            return new UsersGroupsPath(DSL.name(alias), this);
        }

        @Override
        public UsersGroupsPath as(Name alias) {
            return new UsersGroupsPath(alias, this);
        }

        @Override
        public UsersGroupsPath as(Table<?> alias) {
            return new UsersGroupsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<UsersGroupsRecord, Integer> getIdentity() {
        return (Identity<UsersGroupsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersGroupsRecord> getPrimaryKey() {
        return Keys.USERS_GROUPS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersGroupsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_USER_GROUP);
    }

    @Override
    public List<ForeignKey<UsersGroupsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS_GROUPS__FK_USER, Keys.USERS_GROUPS__FK_GROUP);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USERS_GROUPS__FK_USER, null);

        return _users;
    }

    private transient GroupsPath _groups;

    /**
     * Get the implicit join path to the <code>public.groups</code> table.
     */
    public GroupsPath groups() {
        if (_groups == null)
            _groups = new GroupsPath(this, Keys.USERS_GROUPS__FK_GROUP, null);

        return _groups;
    }

    @Override
    public JUsersGroups as(String alias) {
        return new JUsersGroups(DSL.name(alias), this);
    }

    @Override
    public JUsersGroups as(Name alias) {
        return new JUsersGroups(alias, this);
    }

    @Override
    public JUsersGroups as(Table<?> alias) {
        return new JUsersGroups(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsersGroups rename(String name) {
        return new JUsersGroups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsersGroups rename(Name name) {
        return new JUsersGroups(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsersGroups rename(Table<?> name) {
        return new JUsersGroups(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsersGroups where(Condition condition) {
        return new JUsersGroups(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsersGroups where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsersGroups where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsersGroups where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsersGroups where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsersGroups where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsersGroups where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsersGroups where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsersGroups whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsersGroups whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, LocalDateTime, Integer, LocalDateTime, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
