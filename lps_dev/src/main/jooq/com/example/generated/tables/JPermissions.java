/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.JPublic;
import com.example.generated.Keys;
import com.example.generated.tables.JRoles.RolesPath;
import com.example.generated.tables.JRolesPermissions.RolesPermissionsPath;
import com.example.generated.tables.records.PermissionsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPermissions extends TableImpl<PermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.permissions</code>
     */
    public static final JPermissions PERMISSIONS = new JPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionsRecord> getRecordType() {
        return PermissionsRecord.class;
    }

    /**
     * The column <code>public.permissions.id</code>.
     */
    public final TableField<PermissionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.permissions.permission_name</code>.
     */
    public final TableField<PermissionsRecord, String> PERMISSION_NAME = createField(DSL.name("permission_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.permissions.description</code>.
     */
    public final TableField<PermissionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.permissions.created_at</code>.
     */
    public final TableField<PermissionsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.permissions.created_by</code>.
     */
    public final TableField<PermissionsRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.permissions.updated_at</code>.
     */
    public final TableField<PermissionsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.permissions.updated_by</code>.
     */
    public final TableField<PermissionsRecord, Integer> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.INTEGER, this, "");

    private JPermissions(Name alias, Table<PermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPermissions(Name alias, Table<PermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.permissions</code> table reference
     */
    public JPermissions(String alias) {
        this(DSL.name(alias), PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.permissions</code> table reference
     */
    public JPermissions(Name alias) {
        this(alias, PERMISSIONS);
    }

    /**
     * Create a <code>public.permissions</code> table reference
     */
    public JPermissions() {
        this(DSL.name("permissions"), null);
    }

    public <O extends Record> JPermissions(Table<O> path, ForeignKey<O, PermissionsRecord> childPath, InverseForeignKey<O, PermissionsRecord> parentPath) {
        super(path, childPath, parentPath, PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PermissionsPath extends JPermissions implements Path<PermissionsRecord> {
        public <O extends Record> PermissionsPath(Table<O> path, ForeignKey<O, PermissionsRecord> childPath, InverseForeignKey<O, PermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PermissionsPath(Name alias, Table<PermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PermissionsPath as(String alias) {
            return new PermissionsPath(DSL.name(alias), this);
        }

        @Override
        public PermissionsPath as(Name alias) {
            return new PermissionsPath(alias, this);
        }

        @Override
        public PermissionsPath as(Table<?> alias) {
            return new PermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<PermissionsRecord, Integer> getIdentity() {
        return (Identity<PermissionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermissionsRecord> getPrimaryKey() {
        return Keys.PERMISSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<PermissionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PERMISSIONS_PERMISSION_NAME_KEY);
    }

    private transient RolesPermissionsPath _rolesPermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.roles_permissions</code> table
     */
    public RolesPermissionsPath rolesPermissions() {
        if (_rolesPermissions == null)
            _rolesPermissions = new RolesPermissionsPath(this, null, Keys.ROLES_PERMISSIONS__FK_PERMISSION.getInverseKey());

        return _rolesPermissions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.roles</code>
     * table
     */
    public RolesPath roles() {
        return rolesPermissions().roles();
    }

    @Override
    public JPermissions as(String alias) {
        return new JPermissions(DSL.name(alias), this);
    }

    @Override
    public JPermissions as(Name alias) {
        return new JPermissions(alias, this);
    }

    @Override
    public JPermissions as(Table<?> alias) {
        return new JPermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPermissions rename(String name) {
        return new JPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPermissions rename(Name name) {
        return new JPermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPermissions rename(Table<?> name) {
        return new JPermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPermissions where(Condition condition) {
        return new JPermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, LocalDateTime, Integer, LocalDateTime, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
