/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables.daos;


import com.example.generated.tables.JRoles;
import com.example.generated.tables.pojos.RolesVo;
import com.example.generated.tables.records.RolesRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolesDao extends DAOImpl<RolesRecord, RolesVo, Integer> {

    /**
     * Create a new RolesDao without any configuration
     */
    public RolesDao() {
        super(JRoles.ROLES, RolesVo.class);
    }

    /**
     * Create a new RolesDao with an attached configuration
     */
    public RolesDao(Configuration configuration) {
        super(JRoles.ROLES, RolesVo.class, configuration);
    }

    @Override
    public Integer getId(RolesVo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RolesVo> fetchRangeOfJId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JRoles.ROLES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RolesVo> fetchByJId(Integer... values) {
        return fetch(JRoles.ROLES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RolesVo fetchOneByJId(Integer value) {
        return fetchOne(JRoles.ROLES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<RolesVo> fetchOptionalByJId(Integer value) {
        return fetchOptional(JRoles.ROLES.ID, value);
    }

    /**
     * Fetch records that have <code>role_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RolesVo> fetchRangeOfJRoleName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JRoles.ROLES.ROLE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_name IN (values)</code>
     */
    public List<RolesVo> fetchByJRoleName(String... values) {
        return fetch(JRoles.ROLES.ROLE_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>role_name = value</code>
     */
    public RolesVo fetchOneByJRoleName(String value) {
        return fetchOne(JRoles.ROLES.ROLE_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>role_name = value</code>
     */
    public Optional<RolesVo> fetchOptionalByJRoleName(String value) {
        return fetchOptional(JRoles.ROLES.ROLE_NAME, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RolesVo> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JRoles.ROLES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<RolesVo> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JRoles.ROLES.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RolesVo> fetchRangeOfJCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JRoles.ROLES.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<RolesVo> fetchByJCreatedBy(Integer... values) {
        return fetch(JRoles.ROLES.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RolesVo> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JRoles.ROLES.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<RolesVo> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JRoles.ROLES.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RolesVo> fetchRangeOfJUpdatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JRoles.ROLES.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<RolesVo> fetchByJUpdatedBy(Integer... values) {
        return fetch(JRoles.ROLES.UPDATED_BY, values);
    }
}
