/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables.daos;


import com.example.generated.tables.JPermissions;
import com.example.generated.tables.pojos.PermissionsVo;
import com.example.generated.tables.records.PermissionsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionsDao extends DAOImpl<PermissionsRecord, PermissionsVo, Integer> {

    /**
     * Create a new PermissionsDao without any configuration
     */
    public PermissionsDao() {
        super(JPermissions.PERMISSIONS, PermissionsVo.class);
    }

    /**
     * Create a new PermissionsDao with an attached configuration
     */
    public PermissionsDao(Configuration configuration) {
        super(JPermissions.PERMISSIONS, PermissionsVo.class, configuration);
    }

    @Override
    public Integer getId(PermissionsVo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<PermissionsVo> fetchByJId(Integer... values) {
        return fetch(JPermissions.PERMISSIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public PermissionsVo fetchOneByJId(Integer value) {
        return fetchOne(JPermissions.PERMISSIONS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<PermissionsVo> fetchOptionalByJId(Integer value) {
        return fetchOptional(JPermissions.PERMISSIONS.ID, value);
    }

    /**
     * Fetch records that have <code>permission_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJPermissionName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.PERMISSION_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permission_name IN (values)</code>
     */
    public List<PermissionsVo> fetchByJPermissionName(String... values) {
        return fetch(JPermissions.PERMISSIONS.PERMISSION_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>permission_name = value</code>
     */
    public PermissionsVo fetchOneByJPermissionName(String value) {
        return fetchOne(JPermissions.PERMISSIONS.PERMISSION_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>permission_name = value</code>
     */
    public Optional<PermissionsVo> fetchOptionalByJPermissionName(String value) {
        return fetchOptional(JPermissions.PERMISSIONS.PERMISSION_NAME, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<PermissionsVo> fetchByJDescription(String... values) {
        return fetch(JPermissions.PERMISSIONS.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<PermissionsVo> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JPermissions.PERMISSIONS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<PermissionsVo> fetchByJCreatedBy(Integer... values) {
        return fetch(JPermissions.PERMISSIONS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<PermissionsVo> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JPermissions.PERMISSIONS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PermissionsVo> fetchRangeOfJUpdatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JPermissions.PERMISSIONS.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<PermissionsVo> fetchByJUpdatedBy(Integer... values) {
        return fetch(JPermissions.PERMISSIONS.UPDATED_BY, values);
    }
}
