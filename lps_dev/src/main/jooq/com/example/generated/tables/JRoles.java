/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.JPublic;
import com.example.generated.Keys;
import com.example.generated.tables.JGroups.GroupsPath;
import com.example.generated.tables.JGroupsRoles.GroupsRolesPath;
import com.example.generated.tables.JPermissions.PermissionsPath;
import com.example.generated.tables.JRolesPermissions.RolesPermissionsPath;
import com.example.generated.tables.records.RolesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JRoles extends TableImpl<RolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.roles</code>
     */
    public static final JRoles ROLES = new JRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolesRecord> getRecordType() {
        return RolesRecord.class;
    }

    /**
     * The column <code>public.roles.id</code>.
     */
    public final TableField<RolesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.roles.role_name</code>.
     */
    public final TableField<RolesRecord, String> ROLE_NAME = createField(DSL.name("role_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.roles.created_at</code>.
     */
    public final TableField<RolesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.roles.created_by</code>.
     */
    public final TableField<RolesRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.roles.updated_at</code>.
     */
    public final TableField<RolesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.roles.updated_by</code>.
     */
    public final TableField<RolesRecord, Integer> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.INTEGER, this, "");

    private JRoles(Name alias, Table<RolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JRoles(Name alias, Table<RolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.roles</code> table reference
     */
    public JRoles(String alias) {
        this(DSL.name(alias), ROLES);
    }

    /**
     * Create an aliased <code>public.roles</code> table reference
     */
    public JRoles(Name alias) {
        this(alias, ROLES);
    }

    /**
     * Create a <code>public.roles</code> table reference
     */
    public JRoles() {
        this(DSL.name("roles"), null);
    }

    public <O extends Record> JRoles(Table<O> path, ForeignKey<O, RolesRecord> childPath, InverseForeignKey<O, RolesRecord> parentPath) {
        super(path, childPath, parentPath, ROLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RolesPath extends JRoles implements Path<RolesRecord> {
        public <O extends Record> RolesPath(Table<O> path, ForeignKey<O, RolesRecord> childPath, InverseForeignKey<O, RolesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RolesPath(Name alias, Table<RolesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RolesPath as(String alias) {
            return new RolesPath(DSL.name(alias), this);
        }

        @Override
        public RolesPath as(Name alias) {
            return new RolesPath(alias, this);
        }

        @Override
        public RolesPath as(Table<?> alias) {
            return new RolesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<RolesRecord, Integer> getIdentity() {
        return (Identity<RolesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RolesRecord> getPrimaryKey() {
        return Keys.ROLES_PKEY;
    }

    @Override
    public List<UniqueKey<RolesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ROLES_ROLE_NAME_KEY);
    }

    private transient GroupsRolesPath _groupsRoles;

    /**
     * Get the implicit to-many join path to the
     * <code>public.groups_roles</code> table
     */
    public GroupsRolesPath groupsRoles() {
        if (_groupsRoles == null)
            _groupsRoles = new GroupsRolesPath(this, null, Keys.GROUPS_ROLES__FK_ROLE.getInverseKey());

        return _groupsRoles;
    }

    private transient RolesPermissionsPath _rolesPermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.roles_permissions</code> table
     */
    public RolesPermissionsPath rolesPermissions() {
        if (_rolesPermissions == null)
            _rolesPermissions = new RolesPermissionsPath(this, null, Keys.ROLES_PERMISSIONS__FK_ROLE.getInverseKey());

        return _rolesPermissions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.groups</code>
     * table
     */
    public GroupsPath groups() {
        return groupsRoles().groups();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.permissions</code> table
     */
    public PermissionsPath permissions() {
        return rolesPermissions().permissions();
    }

    @Override
    public JRoles as(String alias) {
        return new JRoles(DSL.name(alias), this);
    }

    @Override
    public JRoles as(Name alias) {
        return new JRoles(alias, this);
    }

    @Override
    public JRoles as(Table<?> alias) {
        return new JRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JRoles rename(String name) {
        return new JRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRoles rename(Name name) {
        return new JRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRoles rename(Table<?> name) {
        return new JRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRoles where(Condition condition) {
        return new JRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDateTime, Integer, LocalDateTime, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
