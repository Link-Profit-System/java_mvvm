/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables.daos;


import com.example.generated.tables.JUsers;
import com.example.generated.tables.pojos.UsersVo;
import com.example.generated.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, UsersVo, Integer> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(JUsers.USERS, UsersVo.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(JUsers.USERS, UsersVo.class, configuration);
    }

    @Override
    public Integer getId(UsersVo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUsers.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UsersVo> fetchByJId(Integer... values) {
        return fetch(JUsers.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UsersVo fetchOneByJId(Integer value) {
        return fetchOne(JUsers.USERS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UsersVo> fetchOptionalByJId(Integer value) {
        return fetchOptional(JUsers.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUsers.USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<UsersVo> fetchByJEmail(String... values) {
        return fetch(JUsers.USERS.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public UsersVo fetchOneByJEmail(String value) {
        return fetchOne(JUsers.USERS.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<UsersVo> fetchOptionalByJEmail(String value) {
        return fetchOptional(JUsers.USERS.EMAIL, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUsers.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UsersVo> fetchByJPassword(String... values) {
        return fetch(JUsers.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUsers.USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UsersVo> fetchByJName(String... values) {
        return fetch(JUsers.USERS.NAME, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUsers.USERS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<UsersVo> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JUsers.USERS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUsers.USERS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<UsersVo> fetchByJCreatedBy(Integer... values) {
        return fetch(JUsers.USERS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUsers.USERS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<UsersVo> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JUsers.USERS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersVo> fetchRangeOfJUpdatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUsers.USERS.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<UsersVo> fetchByJUpdatedBy(Integer... values) {
        return fetch(JUsers.USERS.UPDATED_BY, values);
    }
}
